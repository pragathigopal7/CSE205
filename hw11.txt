;1.1 	8 + 2 - 10
	(- (+ 8 2) 10)
	0

;1.2	2 * ( 5 + 10 + 5 ) - 30
	(- (* 2 (+ (+ 5 10) 5)) 30)
	10

;1.3	2 * ( ( 2 * 4 ) + ( 2 + ( 0 * 5 ) ) )
	(* 2 (+ (* 2 4) (+ 2 (* 0 5))))
	20

;1.4	3 * ( 4 + ( ( ( 6 * 6 ) + ( 6 * 6 ) ) / ( 10 + 2 ) ) )
	(* 3 (+ 4 (/ (+ (* 6 6) (* 6 6)) (+ 10 2))))
	30

;1.5	( ( ( ( ( ( 4 + 6 ) * ( 6 + 4 ) ) / 2 ) / 2 ) – 5 ) / 2 ) + ( ( ( ( 4 * 5 ) + ( 5 * 4 ) ) / 2 ) + ( 4 * 5 ) )
	(+ (/ (- (/ (/ (* (+ 4 6) (+ 6 4)) 2) 2) 5) 2) (+ (/ (+ (* 4 5) (* 5 4)) 2) (* 4 5)))
	50

;2.
(define two 2)
(define eight 8) 
(define five 5)
(define four 4)
(define six 6)
(define three 3)
(define ten 10)
(define zero 0)
(define thirty 30)
(- (+ eight two) ten)
(- (* two (+ (+ five ten) five)) thirty)
(* two (+ (* two four) (+ two (* zero five))))
(* three (+ four (/ (+ (* six six) (* six six)) (+ ten two))))
(+ (/ (- (/ (/ (* (+ four six) (+ six four)) two) two) five) two) (+ (/ (+ (* four five) (* five four)) two) (* four five)))



;3.
(define Add
	(lambda (x y)
	(+ x y)
	)
)

;4.
(define	helper
	(lambda (x y)
		(if (=0 y)
			0
		(Add(helper x (-y 1)) x)
		)

))

(define Square
	(lambda x
	(helper x (abs (car x)) (abs (car x)))
	)
)

;5.
(define ReadForSquare
	(Square (read))
)

;6.
(define DiffSquares
	(- ReadForSquare ReadForSquare)
)	

;7.
(define AddLet
	(lambda (x y)
	(let (	(something x)
		(somethingelse y)
	)
	(+ something somethingelse)
	)
)
)
